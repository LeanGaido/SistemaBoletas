@model DAL.Models.DetalleDeclaracionJurada

@{
    ViewBag.Title = "Editar";
}
<br />
<h2 class="text-left">Editar Empleado de DDJJ</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.IdDetalleDeclaracionJurada)

        <div class="form-group" style="display:none">
            @Html.LabelFor(model => model.IdDeclaracionJurada, "IdDeclaracionJurada", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IdDeclaracionJurada", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdDeclaracionJurada, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-1">
                @Html.LabelFor(model => model.IdEmpleadoEmpresa, "Empleado", htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-6">
                @Html.DropDownList("IdEmpleadoEmpresa", null, htmlAttributes: new { @class = "form-control selectpicker" })
                @Html.ValidationMessageFor(model => model.IdEmpleadoEmpresa, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-1">
                @Html.LabelFor(model => model.idCategoria, "Categoria", htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-6">
                @Html.DropDownList("idCategoria", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.idCategoria, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-1">
                @Html.LabelFor(model => model.idJornadaLaboral, "Jornada", htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-6">
                @Html.DropDownList("idJornadaLaboral", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.idJornadaLaboral, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-1">
                @Html.LabelFor(model => model.IdLiquidacionProporcional, "Liquidacion Proporcional", htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-6">
                @Html.DropDownList("IdLiquidacionProporcional", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdLiquidacionProporcional, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            <div class="col-md-1">
                @Html.Label("Sueldo", htmlAttributes: new { @class = "control -label col-md-2" })
            </div>
            <div class="col-md-6">
                <input type="text" name="Sueldo" id="Sueldo" value="@Model.Sueldo" class="form-control" />
                @Html.ValidationMessage("Sueldo", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Presentismo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                <select class="selectpicker" data-live-search="true" name="Presentismo" id="Presentismo">
                    @for (int i = 0; i < 101; i++)
                    {
                        <option value="@i">@i%</option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.Presentismo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-2">
                <input type="submit" id="submit" value="GUARDAR CAMBIOS" class="btn btn-default" />
            </div>
            <div class="col-md-2">
                @Html.ActionLink("VOLVER", "Index", new { id = ViewBag.idDeclaracion }, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript" src="~/Scripts/jquery-3.3.1.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        //CargarCategoriaJornada();
    })
</script>
<script type="text/javascript">
    $(document).ready(function () {
        CargarCategoriaJornada();
    });

    $("#IdEmpleadoEmpresa").change(function () {
        CargarCategoriaJornada();
    })

    $('#IdLiquidacionProporcional').change(function () {
        if ($('#IdLiquidacionProporcional').val() != 1) {
            /*$('#Sueldo').val();*/
        }
    });

    $('#Sueldo').keyup(function () {
        var content = $(this).val();
        $(this).val(content.replace(/[\.]+/g, ','));
    });

    $('#SueldoBase').keyup(function () {
        var content = $(this).val();
        $(this).val(content.replace(/[\.]+/g, ','));
    });

    function CargarCategoriaJornada() {
        $("#idCategoria").empty();
        $("#idJornadaLaboral").empty();
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetEmpleadoJornadaCategoria", "Empleados")',
            data: {
                id: $("#IdEmpleadoEmpresa").val()
            },
            dataType: 'json',
            success: function (data) {
                $.each(data, function (i, data) {
                    $("#idCategoria").append('<option value="' + data.IdCategoria + '">' + data.NombreCategoria + '</option>');
                    $("#idJornadaLaboral").append('<option value="' + data.IdJornada + '">' + data.NombreJornada + '</option>');
                    //$('#IdLiquidacionProporcional').val(1);
                    /*GetSueldoBasico();*/
                });
                $("#idCategoria").selectpicker('refresh');
                $("#idJornadaLaboral").selectpicker('refresh');
                $("#IdLiquidacionProporcional").selectpicker('refresh');
            },
            error: function (ex) {
                alert('A ocurrido un error, intenta nuevamente.');
            }
        });
    };

    function GetSueldoBase() {
        $('#SueldoBase').val('');
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetSueldoBase", "Empleados")',
            data: {
                IdEmpleadoEmpresa: $("#IdEmpleadoEmpresa").val(),
                IdDeclaracionJurada: $('#IdDeclaracionJurada').val()
            },
            dataType: 'json',
            success: function (data) {
                if (data == -1) {
                    alert("No hay Sueldo Minimo Registrado para la Fecha que quiere Declarar");
                }
                else {
                    var sueldo = data.toString();
                    sueldo = sueldo.replace('.', ',');
                    $('#SueldoBase').val(sueldo);
                }
            },
            error: function () {
            }
        });
    };

    function GetSueldoBasico() {
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetSueldoBasico", "Empleados")',
            data: {
                IdEmpleadoEmpresa: $("#IdEmpleadoEmpresa").val(),
                IdDeclaracionJurada: $('#IdDeclaracionJurada').val()
            },
            dataType: 'json',
            success: function (data) {
                if (data == -1) {
                    alert("No hay Sueldo Minimo Registrado para la Fecha que quiere Declarar");
                }
                else {
                    var sueldo = data.toString();
                    sueldo = sueldo.replace('.', ',');
                    $('#Sueldo').val(sueldo);
                }
            },
            error: function (ex) {
                alert('A ocurrido un error, intenta nuevamente.');
            }
        });
    }
</script>
